You can stop the server from the terminal using Ctrl + C and start it using Node directly (node mainEntryFile.js) 
or using a run script in the package.json file with npm run.

For example, the "start": "node server.js" script would be run from the terminal using npm run start.

To implement server auto restarting on file save Node provides the --watch flag you can add to your start script 
"start": "node --watch server.js" or you can install an npm package like nodemon. We will leave this to you as an exercise.

# Start a Working Express Server
One fundamental method is app.listen(port). It tells your server to listen on a given port, putting it in running state. 
For testing reasons, we need the app to be running in the background so we added this method in the server.js file for you.

In Express, routes takes the following structure: app.METHOD(PATH, HANDLER). 
METHOD is an http method in lowercase. PATH is a relative path on the server (it can be a string, or even a regular expression). 
HANDLER is a function that Express calls when the route is matched. 
Handlers take the form function(req, res) {...}, where req is the request object, and res is the response object

# Serve an HTML File
You can respond to requests with a file using the res.sendFile(path) method.

# Serve Static Assets
An HTML server usually has one or more directories that are accessible by the user. 
You can place there the static assets needed by your application (stylesheets, scripts, images).

In Express, you can put in place this functionality using the middleware express.static(path), where the path 
parameter is the absolute path of the folder containing the assets.
Basically, middleware are functions that intercept route handlers, adding some kind of information. 
A middleware needs to be mounted using the method app.use(path, middlewareFunction). 
The first path argument is optional. If you donâ€™t pass it, the middleware will be executed for all requests.

# Serve json
While an HTML server serves HTML, an API serves data. A REST (REpresentational State Transfer) API allows data exchange 
in a simple way, without the need for clients to know any detail about the server. The client only needs to know where the 
resource is (the URL), and the action it wants to perform on it (the verb). The GET verb is used when you are fetching some 
information, without modifying anything. These days, the preferred data format for moving information around the web is JSON. 
Simply put, JSON is a convenient way to represent a JavaScript object as a string, so it can be easily transmitted.

# Use the .env File
The .env file is a hidden file that is used to pass environment variables to your application. This file is secret, 
no one but you can access it, and it can be used to store data that you want to keep private or hidden. 
For example, you can store API keys from external services or your database URI. You can also use it to store configuration 
options. By setting configuration options, you can change the behavior of your application, without the need to rewrite some code.
