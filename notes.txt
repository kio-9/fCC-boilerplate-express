You can stop the server from the terminal using Ctrl + C and start it using Node directly (node mainEntryFile.js) 
or using a run script in the package.json file with npm run.

For example, the "start": "node server.js" script would be run from the terminal using npm run start.

To implement server auto restarting on file save Node provides the --watch flag you can add to your start script 
"start": "node --watch server.js" or you can install an npm package like nodemon. We will leave this to you as an exercise.

# Start a Working Express Server
One fundamental method is app.listen(port). It tells your server to listen on a given port, putting it in running state. 
For testing reasons, we need the app to be running in the background so we added this method in the server.js file for you.

In Express, routes takes the following structure: app.METHOD(PATH, HANDLER). 
METHOD is an http method in lowercase. PATH is a relative path on the server (it can be a string, or even a regular expression). 
HANDLER is a function that Express calls when the route is matched. 
Handlers take the form function(req, res) {...}, where req is the request object, and res is the response object

# Serve an HTML File
You can respond to requests with a file using the res.sendFile(path) method.

# Serve Static Assets
An HTML server usually has one or more directories that are accessible by the user. 
You can place there the static assets needed by your application (stylesheets, scripts, images).

In Express, you can put in place this functionality using the middleware express.static(path), where the path 
parameter is the absolute path of the folder containing the assets.
Basically, middleware are functions that intercept route handlers, adding some kind of information. 
A middleware needs to be mounted using the method app.use(path, middlewareFunction). 
The first path argument is optional. If you don’t pass it, the middleware will be executed for all requests.

# Serve json
While an HTML server serves HTML, an API serves data. A REST (REpresentational State Transfer) API allows data exchange 
in a simple way, without the need for clients to know any detail about the server. The client only needs to know where the 
resource is (the URL), and the action it wants to perform on it (the verb). The GET verb is used when you are fetching some 
information, without modifying anything. These days, the preferred data format for moving information around the web is JSON. 
Simply put, JSON is a convenient way to represent a JavaScript object as a string, so it can be easily transmitted.

# Use the .env File
The .env file is a hidden file that is used to pass environment variables to your application. This file is secret, 
no one but you can access it, and it can be used to store data that you want to keep private or hidden. 
For example, you can store API keys from external services or your database URI. You can also use it to store configuration 
options. By setting configuration options, you can change the behavior of your application, without the need to rewrite some code.

The environment variables are accessible from the app as process.env.VAR_NAME. The process.env object is a global Node object, 
and variables are passed as strings. By convention, the variable names are all uppercase, with words separated by an underscore. 
The .env is a shell file, so you don’t need to wrap names or values in quotes. It is also important to note that there cannot be 
space around the equals sign when you are assigning values to your variables, e.g. VAR_NAME=value. 
Usually, you will put each variable definition on a separate line.

You will need to use the dotenv package. It loads environment variables from your .env file into process.env. 
The dotenv package has already been installed, and is in your project's package.json file. 
At the top of your myApp.js file, add require('dotenv').config() to load the environment variables.

# Implement a Root-Level Request Logger Middleware
Middleware functions are functions that take 3 arguments: the request object, the response object, and the next function 
in the application’s request-response cycle. These functions execute some code that can have side effects on the app, and 
usually add information to the request or response objects. They can also end the cycle by sending a response when some 
condition is met. If they don’t send the response when they are done, they start the execution of the next function in the stack. 
This triggers calling the 3rd argument, next().

to mount a middleware function at root level, you can use the app.use(<mware-function>) method. In this case, 
the function will be executed for all the requests, but you can also set more specific conditions. For example, if you want a 
function to be executed only for POST requests, you could use app.post(<mware-function>). Analogous methods exist for all the 
HTTP verbs (GET, DELETE, PUT, …).


# Get Route Parameter Input from the Client
Route parameters are named segments of the URL, delimited by slashes (/). Each segment captures the value of the part of the 
URL which matches its position. The captured values can be found in the req.params object.
route_path: '/user/:userId/book/:bookId'
actual_request_URL: '/user/546/book/6754'
req.params: {userId: '546', bookId: '6754'}

# Get Query Parameter Input from the Client
route_path: '/library'
actual_request_URL: '/library?userId=546&bookId=6754'
req.query: {userId: '546', bookId: '6754'}

# Use body-parser to Parse POST Requests
POST is the default method used to send client data with HTML forms. In REST convention, POST is used to send data to create 
new items in the database (a new user, or a new blog post).

Raw content of a POST reques: "
POST /path/subpath HTTP/1.0
From: john@example.com
User-Agent: someBrowser/1.0
Content-Type: application/x-www-form-urlencoded
Content-Length: 20

name=John+Doe&age=25
"
the body is encoded like the query string
There is also another type of encoding: multipart/form-data. This one is used to upload binary files. 

In this exercise, you will use a URL encoded body. To parse the data coming from POST requests, you must use the 
body-parser package. This package allows you to use a series of middleware, which can decode data in different formats.

